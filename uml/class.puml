@startuml

' Define ENUMs for status fields
enum "consultation_status" <<enumeration>> {
  pending
  approved
  rejected
}

enum "feedback_status" <<enumeration>> {
  pending
  solved
  rejected
}

' Define classes (previously entities) with attributes, visibility, and methods
class "articles" {
  * +id : uuid <<PK>>
  --
  +title : text <<not null>>
  +subtitle : text
  +content : text
  +cover_image : text
  +created_at : timestamp with time zone
  +likes_count : integer
  -author_id : bigint <<FK>>
  --
  +createArticle(title : text, content : text) : uuid
  +updateArticle(id : uuid, title : text) : void
  +deleteArticle(id : uuid) : void
}

class "article_comments" {
  * +id : uuid <<PK>>
  --
  +article_id : uuid <<FK>>
  -email : text <<not null>>
  +content : text <<not null>>
  +created_at : timestamp with time zone
  --
  +addComment(article_id : uuid, content : text) : uuid
  +updateComment(id : uuid, content : text) : void
  +deleteComment(id : uuid) : void
}

class "article_likes" {
  * +id : uuid <<PK>>
  --
  +article_id : uuid <<FK>> <<not null>>
  -user_id : text <<not null>>
  +created_at : timestamp with time zone
  --
  +likeArticle(article_id : uuid, user_id : text) : uuid
  +unlikearmacle(id : uuid) : void
}

class "users" {
  * +id : bigint <<PK>> <<generated by default as identity>>
  --
  +created_at : timestamp with time zone <<not null>>
  +name : character varying
  -email : character varying <<not null>> <<unique>>
  +is_expert : boolean <<not null>>
  +specialization : text
  +photo : text
  --
  +createUser(name : text, email : text) : bigint
  +updateProfile(id : bigint, name : text) : void
  +getProfile(id : bigint) : json
}

class "consultation_requests" {
  * +id : bigint <<PK>> <<generated by default as identity>>
  --
  -expert_id : bigint <<FK>>
  +name : character varying <<not null>>
  -email : character varying <<not null>>
  -whatsapp : character varying <<not null>>
  +consultation_date : date <<not null>>
  +consultation_time : character varying <<not null>>
  +location : character varying <<not null>>
  +status : consultation_status
  +created_at : timestamp with time zone <<not null>>
  --
  +requestConsultation(expert_id : bigint, date : date) : bigint
  +updateStatus(id : bigint, status : consultation_status) : void
}

class "decision_nodes" {
  * +id : bigint <<PK>> <<generated by default as identity>>
  --
  +node_id : character varying(10) <<not null>> <<unique>>
  +node_type : character varying(10) <<not null>>
  -parent_id : bigint <<FK>>
  +is_yes_path : boolean
  +created_at : timestamp with time zone <<not null>>
  --
  +createNode(node_id : text, node_type : text) : bigint
  +getNode(id : bigint) : json
}

class "diagnoses" {
  * +id : uuid <<PK>>
  --
  -user_id : text <<not null>>
  +symptoms : text[] <<not null>>
  +disease_code : text <<not null>>
  +created_at : timestamp with time zone <<not null>>
  -email : text
  --
  +createDiagnosis(user_id : text, symptoms : text[]) : uuid
  +getDiagnosis(id : uuid) : json
}

class "diseases" {
  * +id : bigint <<PK>> <<generated by default as identity>>
  --
  +name : text <<not null>>
  +symptoms : integer[] <<not null>>
  +created_at : timestamp with time zone <<not null>>
  +code : character varying(10) <<not null>> <<unique>>
  +solution : jsonb <<not null>>
  +about : text <<not null>>
  --
  +addDisease(name : text, code : text) : bigint
  +updateSolution(id : bigint, solution : jsonb) : void
}

class "feedbacks" {
  * +id : uuid <<PK>>
  --
  +created_at : timestamp with time zone <<not null>>
  +is_anonymous : boolean <<not null>>
  +name : text
  -email : text
  -whatsapp : text
  +message : text <<not null>>
  +status : feedback_status <<not null>>
  -user_id : text
  --
  +submitFeedback(message : text, is_anonymous : boolean) : uuid
  +updateFeedbackStatus(id : uuid, status : feedback_status) : void
}

class "settings" {
  * +id : bigint <<PK>>
  --
  +data : jsonb <<not null>>
  +updated_at : timestamp with time zone <<not null>>
  --
  +updateSettings(id : bigint, data : jsonb) : void
  +getSettings(id : bigint) : json
}

class "symptoms" {
  * +id : bigint <<PK>> <<generated by default as identity>>
  --
  +name : text <<not null>>
  +description : text <<not null>>
  +created_at : timestamp with time zone <<not null>>
  +code : character varying(10) <<not null>> <<unique>>
  +image : text
  --
  +addSymptom(name : text, code : text) : bigint
  +getSymptom(id : bigint) : json
}

' Define relationships with explicit multiplicity
articles "1" ||--o{ "0..*" article_comments : article_id
articles "1" ||--o{ "0..*" article_likes : article_id
users "1" ||--o{ "0..*" articles : author_id
users "1" ||--o{ "0..*" consultation_requests : expert_id
decision_nodes "1" ||--o{ "0..*" decision_nodes : parent_id
diseases "1" ||--o{ "0..*" diagnoses : disease_code
consultation_requests ||--o{ consultation_status : status
feedbacks ||--o{ feedback_status : status

' Notes for constraints
note right of diseases
  solution JSONB structure:
  - desc: text (not null)
  - image: text (nullable)
  - list: text (nullable)
  - link: text (nullable)
end note

@enduml