create table public.article_comments (
  id uuid not null default extensions.uuid_generate_v4 (),
  article_id uuid null,
  email text not null,
  content text not null,
  created_at timestamp with time zone null default now(),
  constraint article_comments_pkey primary key (id),
  constraint article_comments_article_id_fkey foreign KEY (article_id) references articles (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.article_likes (
  id uuid not null default extensions.uuid_generate_v4 (),
  article_id uuid not null,
  user_id text not null,
  created_at timestamp with time zone null default now(),
  constraint article_likes_pkey primary key (id),
  constraint article_likes_unique unique (article_id, user_id),
  constraint article_likes_article_id_fkey foreign KEY (article_id) references articles (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.articles (
  id uuid not null default extensions.uuid_generate_v4 (),
  title text not null,
  subtitle text null,
  content text null,
  cover_image text null,
  created_at timestamp with time zone null default now(),
  likes_count integer null default 0,
  author_id bigint null,
  constraint articles_pkey primary key (id),
  constraint articles_author_id_fkey foreign KEY (author_id) references users (id)
) TABLESPACE pg_default;

create index IF not exists idx_articles_author_id on public.articles using btree (author_id) TABLESPACE pg_default;

create table public.consultation_requests (
  id bigint generated by default as identity not null,
  expert_id bigint null,
  name character varying not null,
  email character varying not null,
  whatsapp character varying not null,
  consultation_date date not null,
  consultation_time character varying not null,
  location character varying not null,
  status public.consultation_status null default 'pending'::consultation_status,
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  constraint consultation_requests_pkey primary key (id),
  constraint consultation_requests_expert_id_fkey foreign KEY (expert_id) references users (id)
) TABLESPACE pg_default;

create index IF not exists idx_consultation_requests_expert_id on public.consultation_requests using btree (expert_id) TABLESPACE pg_default;

create index IF not exists idx_consultation_requests_status on public.consultation_requests using btree (status) TABLESPACE pg_default;

create index IF not exists idx_consultation_requests_date on public.consultation_requests using btree (consultation_date) TABLESPACE pg_default;

create table public.decision_nodes (
  id bigint generated by default as identity not null,
  node_id character varying(10) not null,
  node_type character varying(10) not null,
  parent_id bigint null,
  is_yes_path boolean null,
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  constraint decision_nodes_pkey primary key (id),
  constraint decision_nodes_node_id_unique unique (node_id),
  constraint decision_nodes_parent_fkey foreign KEY (parent_id) references decision_nodes (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.diagnoses (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id text not null,
  symptoms text[] not null,
  disease_code text not null,
  created_at timestamp with time zone not null default now(),
  email text null,
  constraint diagnoses_pkey primary key (id)
) TABLESPACE pg_default;

create table public.diseases (
  id bigint generated by default as identity not null,
  name text not null,
  symptoms integer[] not null,
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  code character varying(10) not null,
  solution jsonb not null default '{"desc": "", "link": null, "list": null, "image": null}'::jsonb,
  about text not null default ''::text,
  constraint diseases_pkey primary key (id),
  constraint diseases_code_unique unique (code),
  constraint solution_json_structure check (
    (
      (jsonb_typeof(solution) = 'object'::text)
      and (solution ? 'desc'::text)
      and (solution ? 'image'::text)
      and (solution ? 'list'::text)
      and (solution ? 'link'::text)
      and ((solution ->> 'desc'::text) is not null)
      and (
        ((solution ->> 'image'::text) is null)
        or (
          jsonb_typeof((solution -> 'image'::text)) = 'string'::text
        )
      )
      and (
        ((solution ->> 'list'::text) is null)
        or (
          jsonb_typeof((solution -> 'list'::text)) = 'string'::text
        )
      )
      and (
        ((solution ->> 'link'::text) is null)
        or (
          jsonb_typeof((solution -> 'link'::text)) = 'string'::text
        )
      )
    )
  )
) TABLESPACE pg_default;

create table public.feedbacks (
  id uuid not null default extensions.uuid_generate_v4 (),
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  is_anonymous boolean not null default false,
  name text null,
  email text null,
  whatsapp text null,
  message text not null,
  status text not null default 'pending'::text,
  user_id text null,
  constraint feedbacks_pkey primary key (id),
  constraint status_check check (
    (
      status = any (
        array['pending'::text, 'solved'::text, 'rejected'::text]
      )
    )
  )
) TABLESPACE pg_default;

create table public.settings (
  id bigint not null,
  data jsonb not null,
  updated_at timestamp with time zone not null default timezone ('utc'::text, now()),
  constraint settings_pkey primary key (id)
) TABLESPACE pg_default;

create table public.symptoms (
  id bigint generated by default as identity not null,
  name text not null,
  description text not null,
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  code character varying(10) not null,
  image text null,
  constraint symptoms_pkey primary key (id),
  constraint symptoms_code_unique unique (code)
) TABLESPACE pg_default;

create table public.users (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  name character varying null default '30'::character varying,
  email character varying not null default '50'::character varying,
  is_expert boolean not null,
  specialization text null,
  photo text null,
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email)
) TABLESPACE pg_default;